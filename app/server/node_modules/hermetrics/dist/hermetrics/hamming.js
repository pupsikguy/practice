"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var metric_1 = __importDefault(require("./../hermetrics/metric"));
var Hamming = /** @class */ (function (_super) {
    __extends(Hamming, _super);
    function Hamming(name) {
        if (name === void 0) { name = 'Hamming'; }
        return _super.call(this, name) || this;
    }
    Hamming.prototype.distance = function (source, target, _a) {
        var cost = (_a === void 0 ? {} : _a).cost;
        var costHamming = cost !== null && cost !== void 0 ? cost : 1;
        var lengthSource = source.length;
        var lengthTarget = target.length;
        var lengthDifference = Math.abs(lengthSource - lengthTarget);
        var minuminDistance = Math.min(lengthSource, lengthTarget);
        var distance = 0;
        for (var i = 0; i < minuminDistance; i++) {
            distance += source[i] !== target[i] ? 1 : 0;
        }
        return (lengthDifference + distance) * costHamming;
    };
    Hamming.prototype.maxDistance = function (source, target, _a) {
        var cost = (_a === void 0 ? {} : _a).cost;
        var costHamming = cost !== null && cost !== void 0 ? cost : 1;
        var lengthSource = source.length;
        var lengthTarget = target.length;
        return Math.max(lengthSource, lengthTarget) * costHamming;
    };
    return Hamming;
}(metric_1.default));
exports.default = Hamming;
