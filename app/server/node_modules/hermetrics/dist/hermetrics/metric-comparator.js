"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var levenshtein_1 = __importDefault(require("./levenshtein"));
var jaro_1 = __importDefault(require("./jaro"));
var jaro_winkler_1 = __importDefault(require("./jaro_winkler"));
var jaccard_1 = __importDefault(require("./jaccard"));
var hamming_1 = __importDefault(require("../hermetrics/hamming"));
var dice_1 = __importDefault(require("../hermetrics/dice"));
var damerau_levenshtein_1 = __importDefault(require("../hermetrics/damerau_levenshtein"));
var osa_1 = __importDefault(require("./osa"));
var MetricComparator = /** @class */ (function () {
    function MetricComparator(metrics) {
        if (metrics === void 0) { metrics = [
            new levenshtein_1.default(),
            new jaro_1.default(),
            new jaro_winkler_1.default(),
            new jaccard_1.default(),
            new hamming_1.default(),
            new dice_1.default(),
            new damerau_levenshtein_1.default(),
            new osa_1.default()
        ]; }
        this.metrics = metrics;
        this.metrics = metrics;
    }
    /**
     * similarity
     */
    MetricComparator.prototype.similarity = function (source, target) {
        var results = [];
        this.metrics.forEach(function (metric) {
            var metricItem = {
                metric: {
                    name: 'Generic',
                    similarityValue: 0
                }
            };
            metricItem.metric.name = metric.name;
            metricItem.metric.similarityValue = metric.similarity(source, target);
            results.push(metricItem);
        });
        return results;
    };
    return MetricComparator;
}());
exports.default = MetricComparator;
