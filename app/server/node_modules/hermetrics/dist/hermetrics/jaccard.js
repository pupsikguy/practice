"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var metric_1 = __importDefault(require("./metric"));
var Jaccard = /** @class */ (function (_super) {
    __extends(Jaccard, _super);
    function Jaccard(name) {
        if (name === void 0) { name = 'Jaccard'; }
        return _super.call(this, name) || this;
    }
    Jaccard.prototype.similarity = function (source, target, costs) {
        if (costs === void 0) { costs = {}; }
        if (source.length === 0 && target.length === 0)
            return 1;
        var s = new Set(source);
        var t = new Set(target);
        var result = ((this.intersection(s, t)).length / (this.union(s, t)).length);
        return result;
    };
    Jaccard.prototype.intersection = function (source, target) {
        var s = Array.from(source);
        var t = Array.from(target);
        var intersection = s.filter(function (item) { return t.includes(item); });
        return intersection;
    };
    Jaccard.prototype.union = function (source, target) {
        var s = Array.from(source);
        var t = Array.from(target);
        var stringsUnion = new Set(s.concat(t));
        return Array.from(stringsUnion);
    };
    Jaccard.prototype.distance = function (source, target, costs) {
        if (costs === void 0) { costs = {}; }
        return 1 - this.similarity(source, target, costs);
    };
    return Jaccard;
}(metric_1.default));
exports.default = Jaccard;
