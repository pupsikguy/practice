import LevenshteinCostOptions from '../interfaces/levenshtein-opts.interface';
declare class Metric {
    private readonly _name;
    constructor(name?: string);
    /**
    * distance
    */
    distance(source: string, target: string, { deletionCost, insertionCost, substitutionCost }?: LevenshteinCostOptions): number;
    maxDistance(source: string, target: string, { deletionCost, insertionCost, substitutionCost }?: LevenshteinCostOptions): number;
    /**
     *
     * @param source
     * @param target
     * @param cost
     */
    minDistance(source: string, target: string, { deletionCost, insertionCost, substitutionCost }?: LevenshteinCostOptions): number;
    normalize(x: number, low?: number, high?: number): number;
    normalizedDistance(source: string, target: string, { deletionCost, insertionCost, substitutionCost }?: LevenshteinCostOptions): number;
    /**
     * similarity
     */
    similarity(source: string, target: string, costs?: LevenshteinCostOptions): number;
    get name(): string;
}
export default Metric;
