"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var levenshtein_1 = __importDefault(require("./levenshtein"));
var DamerauLevenshtein = /** @class */ (function (_super) {
    __extends(DamerauLevenshtein, _super);
    function DamerauLevenshtein(name) {
        if (name === void 0) { name = 'Damerau-Levenshtein'; }
        return _super.call(this, name) || this;
    }
    DamerauLevenshtein.prototype.distance = function (source, target, _a) {
        var _b = _a === void 0 ? {} : _a, deletionCost = _b.deletionCost, insertionCost = _b.insertionCost, substitutionCost = _b.substitutionCost, transpositionCost = _b.transpositionCost;
        var sourceLength = source.length;
        var targetLength = target.length;
        var removeCost = deletionCost !== null && deletionCost !== void 0 ? deletionCost : 1;
        var insertCost = insertionCost !== null && insertionCost !== void 0 ? insertionCost : 1;
        var subtractCost = substitutionCost !== null && substitutionCost !== void 0 ? substitutionCost : 1;
        var transposCost = transpositionCost !== null && transpositionCost !== void 0 ? transpositionCost : 1;
        var rows = sourceLength + 2;
        var cols = targetLength + 2;
        var UPPER = Math.max(removeCost, insertCost, subtractCost, transposCost) * (sourceLength + targetLength);
        var distanceMatrix = Array(rows).fill(0).map(function () { return Array(cols).fill(0); });
        for (var i = 0; i < rows; i++) {
            distanceMatrix[i][0] = UPPER;
        }
        for (var j = 0; j < cols; j++) {
            distanceMatrix[0][j] = UPPER;
        }
        for (var i = 1; i < rows; i++) {
            distanceMatrix[i][1] = (i - 1) * insertCost;
        }
        for (var j = 1; j < cols; j++) {
            distanceMatrix[1][j] = (j - 1) * insertCost;
        }
        var lastMatchCol = 0;
        var lastMatchRow = 0;
        var sourceSymbol = '';
        var targetSymbol = '';
        var optSubCost = 0;
        var deletion = 0;
        var insertion = 0;
        var substitution = 0;
        var transpotition = 0;
        var lastRow = Object.create(null);
        for (var i = 1; i < sourceLength + 1; i++) {
            sourceSymbol = source[i - 1];
            lastMatchCol = 0;
            for (var j = 1; j < targetLength + 1; j++) {
                targetSymbol = target[j - 1];
                lastMatchRow = lastRow[targetSymbol] !== undefined ? lastRow[targetSymbol] : 0;
                optSubCost = sourceSymbol === targetSymbol ? 0 : subtractCost;
                deletion = distanceMatrix[i][j + 1] + removeCost;
                insertion = distanceMatrix[i + 1][j] + insertCost;
                substitution = distanceMatrix[i][j] + optSubCost;
                transpotition = distanceMatrix[lastMatchRow][lastMatchCol] +
                    Math.max((i - lastMatchRow) * removeCost, (j - lastMatchCol) * insertCost) + transposCost;
                distanceMatrix[i + 1][j + 1] = Math.min(deletion, insertion, substitution, transpotition);
                if (optSubCost === 0) {
                    lastMatchCol = j;
                }
            }
            lastRow[sourceSymbol] = i;
        }
        return distanceMatrix[rows - 1][cols - 1];
    };
    /**
       *
       * @param source
       * @param target
       * @param param2
       */
    DamerauLevenshtein.prototype.maxDistance = function (source, target, _a) {
        var _b = _a === void 0 ? {} : _a, deletionCost = _b.deletionCost, insertionCost = _b.insertionCost, substitutionCost = _b.substitutionCost, _c = _b.cost, cost = _c === void 0 ? 1 : _c;
        return _super.prototype.maxDistance.call(this, source, target, { deletionCost: deletionCost, insertionCost: insertionCost, substitutionCost: substitutionCost, cost: cost });
    };
    return DamerauLevenshtein;
}(levenshtein_1.default));
exports.default = DamerauLevenshtein;
