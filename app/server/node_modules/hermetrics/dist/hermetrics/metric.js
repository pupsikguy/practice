"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Metric = /** @class */ (function () {
    function Metric(name) {
        if (name === void 0) { name = 'Generic'; }
        this._name = name;
    }
    /**
    * distance
    */
    Metric.prototype.distance = function (source, target, _a) {
        var _b = _a === void 0 ? {} : _a, deletionCost = _b.deletionCost, insertionCost = _b.insertionCost, substitutionCost = _b.substitutionCost;
        return source === target ? 0 : 1;
    };
    Metric.prototype.maxDistance = function (source, target, _a) {
        var _b = _a === void 0 ? {} : _a, deletionCost = _b.deletionCost, insertionCost = _b.insertionCost, substitutionCost = _b.substitutionCost;
        return (source.length === 0 && target.length === 0) ? 0 : 1;
    };
    /**
     *
     * @param source
     * @param target
     * @param cost
     */
    Metric.prototype.minDistance = function (source, target, _a) {
        var _b = _a === void 0 ? {} : _a, deletionCost = _b.deletionCost, insertionCost = _b.insertionCost, substitutionCost = _b.substitutionCost;
        return 0;
    };
    Metric.prototype.normalize = function (x, low, high) {
        if (low === void 0) { low = 0; }
        if (high === void 0) { high = 1; }
        // const norm : number = 0
        if (high <= low) {
            return 0;
        }
        if (x >= high) {
            return 1;
        }
        if (x <= low) {
            return 0;
        }
        return (x - low) / (high - low);
    };
    Metric.prototype.normalizedDistance = function (source, target, _a) {
        var _b = _a === void 0 ? {} : _a, deletionCost = _b.deletionCost, insertionCost = _b.insertionCost, substitutionCost = _b.substitutionCost;
        var x = this.distance(source, target, { deletionCost: deletionCost, insertionCost: insertionCost, substitutionCost: substitutionCost });
        var min = this.minDistance(source, target, { deletionCost: deletionCost, insertionCost: insertionCost, substitutionCost: substitutionCost });
        var max = this.maxDistance(source, target, { deletionCost: deletionCost, insertionCost: insertionCost, substitutionCost: substitutionCost });
        return this.normalize(x, min, max);
    };
    /**
     * similarity
     */
    Metric.prototype.similarity = function (source, target, costs) {
        if (costs === void 0) { costs = {}; }
        return 1 - this.normalizedDistance(source, target, costs);
    };
    Object.defineProperty(Metric.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    return Metric;
}());
exports.default = Metric;
